//----------------------------------------------------------------------------
//
// TSDuck - The MPEG Transport Stream Toolkit
// Copyright (c) 2005-2024, Thierry Lelegard
// BSD-2-Clause license, see LICENSE.txt file or https://tsduck.io/license
//
//----------------------------------------------------------------------------
//
//  TSUnit test suite for class ts::ReproducibleRandomGenerator
//
//----------------------------------------------------------------------------

#include "tsReproducibleRandomGenerator.h"
#include "tsByteBlock.h"
#include "tsunit.h"


//----------------------------------------------------------------------------
// The test fixture
//----------------------------------------------------------------------------

class ReproducibleRandomGeneratorTest: public tsunit::Test
{
public:
    virtual void beforeTest() override;
    virtual void afterTest() override;

    void testRandom();

    TSUNIT_TEST_BEGIN(ReproducibleRandomGeneratorTest);
    TSUNIT_TEST(testRandom);
    TSUNIT_TEST_END();

private:
    void testRead(ts::RandomGenerator& prng, const ts::ByteBlock& expected);
};

TSUNIT_REGISTER(ReproducibleRandomGeneratorTest);


//----------------------------------------------------------------------------
// Initialization.
//----------------------------------------------------------------------------

// Test suite initialization method.
void ReproducibleRandomGeneratorTest::beforeTest()
{
}

// Test suite cleanup method.
void ReproducibleRandomGeneratorTest::afterTest()
{
}


//----------------------------------------------------------------------------
// Test cases
//----------------------------------------------------------------------------

void ReproducibleRandomGeneratorTest::testRead(ts::RandomGenerator& prng, const ts::ByteBlock& expected)
{
    ts::ByteBlock generated;
    TSUNIT_ASSERT(prng.readByteBlock(generated, expected.size()));

    if (expected != generated) {
        debug() << "ReproducibleRandomGeneratorTest: readByteBlock failed" << std::endl
                << "  Expected: " << ts::UString::Dump(expected, ts::UString::SINGLE_LINE) << std::endl
                << "  Returned: " << ts::UString::Dump(generated, ts::UString::SINGLE_LINE) << std::endl;
    }

    TSUNIT_EQUAL(expected.size(), generated.size());
    TSUNIT_ASSERT(expected == generated);
}

void ReproducibleRandomGeneratorTest::testRandom()
{
    ts::ReproducibleRandomGenerator prng;

    static const uint8_t seed1[25] = {
        0xE7, 0xD9, 0x12, 0x04, 0xF0, 0x3E, 0xD3, 0x46, 0xF0, 0xA1, 0x4E, 0x44, 0xAD, 0x6F, 0x92, 0xAD,
        0x08, 0x63, 0x6B, 0xB5, 0xD3, 0xEC, 0xC9, 0xDE, 0x02,
    };
    static const uint8_t seed2[25] = {
        0x98, 0x0D, 0x18, 0x16, 0x8E, 0x78, 0xD0, 0x6E, 0xF0, 0xF6, 0x12, 0x9E, 0x18, 0x23, 0xB9, 0x41,
        0xC8, 0xFA, 0xA6, 0xB9, 0xF5, 0xD2, 0xE2, 0xD0, 0x8D,
    };
    static const uint8_t seed3[25] = {
        0x22, 0xD3, 0x32, 0xB2, 0x04, 0x21, 0x9F, 0x6D, 0x55, 0x1C, 0x09, 0xF9, 0x6B, 0x19, 0xB3, 0x39,
        0x4C, 0x7D, 0x54, 0xFE, 0xDB, 0x19, 0xFF, 0xA7, 0x45,
    };

    TSUNIT_ASSERT(!prng.ready());
    TSUNIT_ASSERT(prng.seed(seed1, sizeof(seed1)));
    TSUNIT_ASSERT(!prng.ready());
    TSUNIT_ASSERT(prng.seed(seed2, sizeof(seed2)));
    TSUNIT_ASSERT(!prng.ready());
    TSUNIT_ASSERT(prng.seed(seed3, sizeof(seed3)));
    TSUNIT_ASSERT(prng.ready());

    testRead(prng, {
        0xB9, 0x73, 0x1A,
    });
    testRead(prng, {
        0xCE, 0xD2, 0x83, 0x05, 0x05, 0xE8, 0xC1, 0xCC, 0xA1, 0xC7, 0xDA, 0xA4,
    });
    testRead(prng, {
        0xC5, 0xA3, 0xC3, 0xD4, 0x51, 0x8C, 0x02, 0x6D, 0xAC, 0x33, 0x17, 0xE3, 0x9A, 0x3E, 0x2C, 0x7D,
        0x56, 0x5D, 0x20, 0x7C, 0x39, 0x45, 0x8B, 0xB4, 0xC7, 0x27, 0x23, 0x51, 0x1B, 0x72, 0xEA, 0xBB,
        0x3C, 0xDB, 0xB1, 0xCF, 0xCB, 0x43, 0xA7, 0x6A, 0xEB, 0xA8, 0xCD, 0xF3, 0x9B,
    });

    static const uint8_t seed4[64] = {
        0xF7, 0x0E, 0xBA, 0x98, 0x56, 0xD4, 0x30, 0xDD, 0xE3, 0x82, 0xAF, 0xFF, 0x74, 0x0D, 0x44, 0xAD,
        0x3F, 0xC2, 0xCC, 0x4C, 0x8E, 0x7F, 0xF4, 0x71, 0xD9, 0xCD, 0x83, 0x57, 0x93, 0x8C, 0xD4, 0x5F,
        0x2E, 0x3A, 0x75, 0x69, 0x52, 0xC8, 0x54, 0x3F, 0x84, 0xFB, 0x10, 0x96, 0xCF, 0x07, 0x97, 0xE4,
        0x8F, 0x93, 0x48, 0xC1, 0x71, 0x15, 0x74, 0x77, 0x70, 0x57, 0xE6, 0x5D, 0xD3, 0x18, 0x27, 0xD7,
    };

    static const uint8_t seed5[3] = {
        0xC2, 0x3A, 0x48
    };

    prng.reset();
    TSUNIT_ASSERT(!prng.ready());
    TSUNIT_ASSERT(prng.seed(seed4, sizeof(seed4)));
    TSUNIT_ASSERT(prng.ready());

    testRead(prng, {
        0x29, 0x7E, 0x53,
    });
    testRead(prng, {
        0xB5, 0xFE, 0x22, 0x15, 0x87, 0x31, 0xF2, 0x0A, 0x5C, 0xD3, 0xC7, 0x70, 0x14, 0xCD, 0x7C, 0x34,
        0xB1, 0x4D, 0x64, 0x8E, 0x1E, 0x27, 0x5A, 0xEB, 0x0A, 0xDF, 0x09, 0xF5, 0xAE, 0x80, 0xAB, 0x2B,
        0x15, 0xC1, 0x32, 0x73, 0x8A, 0xBF, 0xAF, 0xAC, 0xAC, 0x61, 0xE6, 0x19, 0x74, 0xDF, 0xFC, 0xB2,
    });

    prng.reset();
    TSUNIT_ASSERT(!prng.ready());
    TSUNIT_ASSERT(prng.seed(seed4, sizeof(seed4)));
    TSUNIT_ASSERT(prng.ready());

    testRead(prng, {
        0x29, 0x7E, 0x53,
    });
    TSUNIT_ASSERT(prng.ready());
    TSUNIT_ASSERT(prng.seed(seed5, sizeof(seed5)));
    TSUNIT_ASSERT(prng.ready());
    testRead(prng, {
        0x67, 0xA3, 0x09, 0x72, 0x9E, 0x6C, 0x5E, 0xF5, 0x36, 0xCB, 0x47, 0x36, 0x33, 0x51, 0x44, 0x10,
        0x89, 0x2D, 0xEE, 0x5B, 0x35, 0xC5, 0xCE, 0x67, 0x6F, 0x44, 0x9A, 0xF3, 0xAB, 0xCC, 0xF0, 0xA5,
        0xA3, 0x62, 0x62, 0xD4, 0x72, 0x5A, 0xA6, 0x90, 0x60, 0x03, 0xAC, 0xB5, 0x2C, 0xB9, 0x64, 0x0F,
    });
}
